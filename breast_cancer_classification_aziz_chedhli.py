# -*- coding: utf-8 -*-
"""Breast Cancer Classification- Aziz CHEDHLI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pfVhaqQOZN1RL_pFjnOEyp72e_UeMwY9
"""

from google.colab import drive
drive.mount('/content/drive')

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content/drive/My Drive/Kaggle"

"/content/drive/My Drive/kaggle"

import os

os.environ['KAGGLE_USERNAME'] = "azizchedhli"
os.environ['KAGGLE_KEY'] = "ccb2db64326e0030bc405c6bf07d4368"

!kaggle datasets download -d paultimothymooney/breast-histopathology-images

!ls

!!unzip \*.zip  && rm *.zip

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from tensorflow.keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.metrics import categorical_crossentropy
from keras.models import Sequential, Model
from keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D
from keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense, AvgPool2D,MaxPool2D
from keras.models import Sequential, Model
from keras.optimizers import Adam
import cv2

data = '/content/10264'
No_breast_cancer = '/content/10264/No'
Yes_breast_cancer = '/content/10264/Yes'

files=os.listdir("/content")
for f in files :
  print(f)

listNo=[]
listYes=[]
for f in files :
  filepath = os.path.join("/content/",f)
  pathNo=os.path.join(filepath,"0")
  listNo.append(pathNo)
  pathYes=os.path.join(filepath,"1")
  listYes.append(pathYes)
print(listYes)

filepaths1 = []
labels = []

# Iterate through listNo
for fi in listNo:
    for root, dirs, files in os.walk(fi):
        for file in files:
            filepath2 = os.path.join(root, file)
            filepaths1.append(filepath2)
            labels.append("No")



# Iterate through listYes
for ji in listYes:
    for root, dirs, files in os.walk(ji):
        for file in files:
            filepath3 = os.path.join(root, file)
            filepaths1.append(filepath3)
            labels.append("Yes")
print(labels)
print('filepaths: ', len(filepaths1), '   labels: ', len(labels))

No_breast_cancer = '/content/10264/0'
Yes_breast_cancer = '/content/10264/1'

classes = ['yes','No']
dirlist = [Yes_breast_cancer,No_breast_cancer]
filepaths=[]
labels=[]
for i,j in zip(dirlist,classes):
  filelist=os.listdir(i)
  for f in filelist :
    filepath=os.path.join(i,f)
    filepaths.append(filepath)
    labels.append(j)
print ('filepaths: ', len(filepaths), '   labels: ', len(labels))
print (labels)

Files=pd.Series(filepaths,name='filepaths')
Label=pd.Series(labels,name='Labels')
df=pd.concat([Files,Label],axis=1)
#df=pd.DataFrame(np.array(df).reshape(1204,2) ,columns = ['filepaths', 'labels'])
df.head()

print(df['Labels'].value_counts())

plt.figure(figsize=(12,8))
for i in range(15):
    random = np.random.randint(1,len(df))
    plt.subplot(3,5,i+1)
    #df.loc bech traja3lek el path ta3 el number random heka
    plt.imshow(cv2.imread(df.loc[random,"filepaths"]))
    plt.title(df.loc[random, "Labels"], size = 15, color = "black")
    plt.xticks([])
    plt.yticks([])

plt.show()

from sklearn.model_selection import train_test_split
train, test = train_test_split(df,train_size=0.8,random_state=0)
train_new, valid = train_test_split(train,train_size=0.90,random_state=0)
print(f"train set shape: {train_new.shape}")
print(f"test set shape: {test.shape}")
print(f"validation set shape: {valid.shape}")

plt.imshow(cv2.imread(df.loc[1,"filepaths"]))

train_datagen = ImageDataGenerator(rescale = 1./255.,rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2,
                                   shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True, vertical_flip =True)
test_datagen = ImageDataGenerator(rescale = 1.0/255.)

train_gen = train_datagen.flow_from_dataframe(dataframe = train_new,
                                              x_col = 'filepaths', y_col ='Labels',
                                              target_size = (224,224), batch_size = 32,
                                              class_mode = 'binary', shuffle = True)
val_gen = train_datagen.flow_from_dataframe(valid,
                                            target_size=(224,224), x_col = 'filepaths', y_col ='Labels',
                                            class_mode='binary',
                                            batch_size= 16, shuffle=True)
test_gen = test_datagen.flow_from_dataframe(test,
                                            target_size = (224,224), x_col = 'filepaths', y_col ='Labels',
                                             class_mode = 'binary',
                                            batch_size = 16, shuffle = False)

train_gen.class_indices

from tensorflow import keras
base_model = keras.applications.ResNet50V2(
    weights="imagenet",  # Load weights pre-trained on ImageNet.
    input_shape=(224, 224, 3),
    include_top=False,
)  # Do not include the ImageNet classifier at the top.

# Freeze the base_model
base_model.trainable = False

# Create new model on top
inputs = keras.Input(shape=(224, 224, 3))


# The base model contains batchnorm layers. We want to keep them in inference mode
# when we unfreeze the base model for fine-tuning, so we make sure that the
# base_model is running in inference mode here.
x = base_model(inputs, training=False)
x = keras.layers.GlobalAveragePooling2D()(x)
x = keras.layers.Dropout(0.2)(x)  # Regularize with dropout
outputs = keras.layers.Dense(1, activation="sigmoid")(x)
model = keras.Model(inputs, outputs)

model.summary()

callbacks = [
    tf.keras.callbacks.ModelCheckpoint("Tumor_classifier_model.h5", save_best_only=True, verbose = 0)
]





model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate= 0.0001), metrics=['accuracy'])


history = model.fit(train_gen, validation_data = val_gen, epochs = 100,
                    callbacks = [callbacks], verbose = 1)

model.save("model.h5")

Model Evaluation

pd.DataFrame(history.history).plot(figsize=(8, 5))
plt.grid(True)
plt.gca().set_ylim(0, 1)
plt.show()



from PIL import Image
model_path = "model.h5"
loaded_model = tf.keras.models.load_model(model_path)

# import matplotlib.pyplot as plt
import numpy as np

image = cv2.imread("/content/10264/0/10264_idx5_x1001_y501_class0.png")

image_fromarray = Image.fromarray(image, 'RGB')
resize_image = image_fromarray.resize((224, 224))
expand_input = np.expand_dims(resize_image,axis=0)
input_data = np.array(expand_input)
input_data = input_data/255

pred = loaded_model.predict(input_data)
if pred >= 0.5:
  print("Yes")
else:
  print("No")

train_gen.class_indices

